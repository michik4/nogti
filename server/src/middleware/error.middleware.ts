import { Request, Response, NextFunction } from 'express';
import ResponseType from '../types/response.type';
import { ConsoleUtil } from '../utils/console.util';
import  ApiResponse  from '../types/response.type';

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 - Not Found
export const notFoundHandler = (req: Request, res: Response, next: NextFunction) => {
    const response: ResponseType = {
        success: false,
        error: `–ú–∞—Ä—à—Ä—É—Ç ${req.method} ${req.originalUrl} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
        message: "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        status: "error",
        code: 404,
        data: {
            method: req.method,
            url: req.originalUrl,
            timestamp: new Date().toISOString(),
            ip: req.ip || req.socket.remoteAddress
        }
    };

    ConsoleUtil.showError(`404 Error: ${req.method} ${req.originalUrl} - IP: ${req.ip || req.socket.remoteAddress}`);
    
    res.status(404).json(response);
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
export const errorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
    console.error(`üí• Server Error:`, err);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥ —Å—Ç–∞—Ç—É—Å–∞
    const statusCode = err.statusCode || err.status || 500;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    const message = err.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
    
    const response: ResponseType = {
        success: false,
        error: message,
        message: statusCode === 500 ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" : message,
        status: "error",
        code: statusCode,
        data: {
            timestamp: new Date().toISOString(),
            method: req.method,
            url: req.originalUrl,
            ip: req.ip || req.socket.remoteAddress,
            // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º stack trace
            ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
        }
    };

    res.status(statusCode).json(response);
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
export const asyncErrorHandler = (fn: any) => {
    return (req: Request, res: Response, next: NextFunction) => {
        Promise.resolve(fn(req, res, next)).catch(next);
    };
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
export const errorLogger = (err: any, req: Request, res: Response, next: NextFunction) => {
    const timestamp = new Date().toISOString();
    const method = req.method;
    const url = req.originalUrl;
    const ip = req.ip || req.socket.remoteAddress;
    const userAgent = req.get('User-Agent') || 'Unknown';

    console.error(`
üö® [${timestamp}] ERROR OCCURRED
üìç ${method} ${url}
üåê IP: ${ip}
üñ•Ô∏è  User-Agent: ${userAgent}
üí• Error: ${err.message}
üìö Stack: ${err.stack}
    `.trim());

    next(err);
};

/**
 * Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–∞ POST –∑–∞–ø—Ä–æ—Å–æ–≤
 */
export const validateRequestBody = (req: Request, res: Response, next: NextFunction): void => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ undefined (–Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ express.json())
    // –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç {} —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º —Ç–µ–ª–æ–º –∑–∞–ø—Ä–æ—Å–∞
    // –ò—Å–∫–ª—é—á–∞–µ–º multipart/form-data –∑–∞–ø—Ä–æ—Å—ã (–¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤)
    const contentType = req.get('Content-Type') || '';
    const isMultipartFormData = contentType.startsWith('multipart/form-data');
    
    if (req.method === 'POST' && req.body === undefined && !isMultipartFormData) {
        const response: ResponseType = {
            success: false,
            error: '–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π Content-Type',
            message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞',
            status: 'error',
            code: 400,
            data: undefined
        };
        res.status(400).json(response);
        return;
    }
    next();
}; 