#!/usr/bin/env node

import * as fs from 'fs';
import * as path from 'path';
import * as readline from 'readline';
import { ConsoleUtil } from '../utils/console.util';

/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env —Ñ–∞–π–ª–µ
 */
class EnvCLI {
    private envPath: string;
    private unsafeMode: boolean;

    constructor() {
        this.envPath = path.join(process.cwd(), '.env');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ --unsafe –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        this.unsafeMode = process.argv.includes('--unsafe') || 
                         process.argv.includes('unsafe') ||
                         process.argv.includes('-u');
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
     */
    async run(): Promise<void> {
        const command = process.argv[2];
        const key = process.argv[3];
        const value = process.argv[4];

        try {
            switch (command) {
                case 'create':
                    await this.createEnvFile();
                    break;

                case 'get':
                    if (!key) {
                        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á: npm run env get <KEY>');
                        process.exit(1);
                    }
                    this.getVariable(key);
                    break;

                case 'set':
                    if (!key || !value) {
                        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á –∏ –∑–Ω–∞—á–µ–Ω–∏–µ: npm run env set <KEY> <VALUE>');
                        process.exit(1);
                    }
                    await this.setVariable(key, value);
                    break;

                case 'delete':
                case 'del':
                    if (!key) {
                        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á: npm run env delete <KEY>');
                        process.exit(1);
                    }
                    await this.deleteVariable(key);
                    break;

                case 'list':
                case 'ls':
                case 'show':
                    this.listVariables();
                    break;

                case 'backup':
                    await this.backupEnvFile();
                    break;

                case 'restore':
                    if (!key) {
                        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: npm run env restore <filename>');
                        process.exit(1);
                    }
                    await this.restoreEnvFile(key);
                    break;

                case 'validate':
                    this.validateEnvFile();
                    break;

                case 'template':
                    await this.createTemplate();
                    break;

                case 'copy':
                    if (!key) {
                        console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É-–∏—Å—Ç–æ—á–Ω–∏–∫—É: npm run env copy <source>');
                        process.exit(1);
                    }
                    await this.copyEnvFile(key);
                    break;

                case 'edit':
                    await this.interactiveEdit();
                    break;

                case 'help':
                default:
                    this.showHelp();
                    break;
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
            process.exit(1);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
     */
    private async createEnvFile(): Promise<void> {
        if (fs.existsSync(this.envPath)) {
            ConsoleUtil.showWarning('–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            const overwrite = await this.askQuestion('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ');
            if (overwrite.toLowerCase() !== 'y') {
                ConsoleUtil.showInfo('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                return;
            }
        }

        const defaultContent = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=3000
NODE_ENV=development
HOST=localhost

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=
DB_DATABASE=prometai_dev

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL=debug
ENABLE_REQUEST_LOGGING=true
ENABLE_RESPONSE_LOGGING=true

# JWT —Å–µ–∫—Ä–µ—Ç
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CORS_ORIGIN=http://localhost:3000
`;

        fs.writeFileSync(this.envPath, defaultContent);
        ConsoleUtil.showSuccess('–§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
     */
    private getVariable(key: string): void {
        if (!fs.existsSync(this.envPath)) {
            console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const envContent = fs.readFileSync(this.envPath, 'utf8');
        const lines = envContent.split('\n');
        
        for (const line of lines) {
            if (line.trim().startsWith(key + '=')) {
                const value = line.split('=').slice(1).join('=');
                const displayValue = this.maskSensitiveValue(key, value);
                console.log(`${key}=${displayValue}`);
                return;
            }
        }

        ConsoleUtil.showError(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
     */
    private async setVariable(key: string, value: string): Promise<void> {
        if (!fs.existsSync(this.envPath)) {
            ConsoleUtil.showInfo('–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            await this.createEnvFile();
        }

        let envContent = fs.readFileSync(this.envPath, 'utf8');
        const lines = envContent.split('\n');
        let keyFound = false;

        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
        for (let i = 0; i < lines.length; i++) {
            if (lines[i].trim().startsWith(key + '=')) {
                lines[i] = `${key}=${value}`;
                keyFound = true;
                ConsoleUtil.showSuccess(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞`);
                break;
            }
        }

        // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        if (!keyFound) {
            if (lines[lines.length - 1] !== '') {
                lines.push('');
            }
            lines.push(`${key}=${value}`);
            ConsoleUtil.showSuccess(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} –¥–æ–±–∞–≤–ª–µ–Ω–∞`);
        }

        fs.writeFileSync(this.envPath, lines.join('\n'));
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
     */
    private async deleteVariable(key: string): Promise<void> {
        if (!fs.existsSync(this.envPath)) {
            console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const envContent = fs.readFileSync(this.envPath, 'utf8');
        const lines = envContent.split('\n');
        let keyFound = false;

        const filteredLines = lines.filter(line => {
            if (line.trim().startsWith(key + '=')) {
                keyFound = true;
                return false;
            }
            return true;
        });

        if (keyFound) {
            fs.writeFileSync(this.envPath, filteredLines.join('\n'));
            ConsoleUtil.showSuccess(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} —É–¥–∞–ª–µ–Ω–∞`);
        } else {
            ConsoleUtil.showError(`–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${key} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
    }

    /**
     * –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
     */
    private listVariables(): void {
        if (!fs.existsSync(this.envPath)) {
            console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const envContent = fs.readFileSync(this.envPath, 'utf8');
        const lines = envContent.split('\n');
        
        ConsoleUtil.showSectionHeader('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        ConsoleUtil.showSeparator();

        for (const line of lines) {
            if (line.trim() && !line.trim().startsWith('#')) {
                const [key, ...valueParts] = line.split('=');
                const value = valueParts.join('=');
                let displayValue = this.maskSensitiveValue(key, value);
                
                // –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                displayValue = displayValue.length > 50 ? displayValue.substring(0, 47) + '...' : displayValue;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–æ
                const isMasked = !this.unsafeMode && this.isSensitiveVariable(key) && value.length > 0;
                const maskedIndicator = isMasked ? ' üîí' : '';
                
                console.log(`${key.padEnd(25)} = ${displayValue}${maskedIndicator}`);
            } else if (line.trim().startsWith('#')) {
                console.log(`\nüí¨ ${line.trim()}`);
            }
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if (!this.unsafeMode) {
            console.log(`\nüîí –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'unsafe' —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.`);
            console.log(`   –ü—Ä–∏–º–µ—Ä: npm run env list unsafe`);
        } else {
            console.log(`\n‚ö†Ô∏è  –†–µ–∂–∏–º unsafe: –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª–∏!`);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     */
    private async backupEnvFile(): Promise<void> {
        if (!fs.existsSync(this.envPath)) {
            console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
        const backupPath = path.join(process.cwd(), `.env.backup.${timestamp}`);

        fs.copyFileSync(this.envPath, backupPath);
        ConsoleUtil.showSuccess(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${path.basename(backupPath)}`);
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     */
    private async restoreEnvFile(backupFile: string): Promise<void> {
        const backupPath = path.join(process.cwd(), backupFile);

        if (!fs.existsSync(backupPath)) {
            console.error(`‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ ${backupFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        if (fs.existsSync(this.envPath)) {
            const overwrite = await this.askQuestion('–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª? (y/N): ');
            if (overwrite.toLowerCase() !== 'y') {
                console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                return;
            }
        }

        fs.copyFileSync(backupPath, this.envPath);
        ConsoleUtil.showSuccess(`–§–∞–π–ª .env –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ ${backupFile}`);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è .env —Ñ–∞–π–ª–∞
     */
    private validateEnvFile(): void {
        if (!fs.existsSync(this.envPath)) {
            console.error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const envContent = fs.readFileSync(this.envPath, 'utf8');
        const lines = envContent.split('\n');
        const issues: string[] = [];
        const duplicates: string[] = [];
        const keys = new Set<string>();

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i].trim();
            
            if (line && !line.startsWith('#')) {
                const [key, ...valueParts] = line.split('=');
                
                if (!key) {
                    issues.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –ü—É—Å—Ç–æ–π –∫–ª—é—á`);
                } else if (keys.has(key)) {
                    duplicates.push(key);
                } else {
                    keys.add(key);
                }

                if (valueParts.length === 0) {
                    issues.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${key}`);
                }
            }
        }

        ConsoleUtil.showSectionHeader('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ .env —Ñ–∞–π–ª–∞');

        if (issues.length === 0 && duplicates.length === 0) {
            ConsoleUtil.showSuccess('–§–∞–π–ª .env –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω');
        } else {
            if (issues.length > 0) {
                ConsoleUtil.showError('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:');
                issues.forEach(issue => console.log(`  ‚Ä¢ ${issue}`));
            }

            if (duplicates.length > 0) {
                ConsoleUtil.showWarning('–ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã:');
                duplicates.forEach(dup => console.log(`  ‚Ä¢ ${dup}`));
            }
        }

        console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${keys.size} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö`);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞
     */
    private async createTemplate(): Promise<void> {
        const templatePath = path.join(process.cwd(), '.env.template');

        if (fs.existsSync(templatePath)) {
            const overwrite = await this.askQuestion('–®–∞–±–ª–æ–Ω .env.template —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ');
            if (overwrite.toLowerCase() !== 'y') {
                console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                return;
            }
        }

        let templateContent = '';

        if (fs.existsSync(this.envPath)) {
            const envContent = fs.readFileSync(this.envPath, 'utf8');
            const lines = envContent.split('\n');

            for (const line of lines) {
                if (line.trim().startsWith('#') || line.trim() === '') {
                    templateContent += line + '\n';
                } else if (line.includes('=')) {
                    const [key] = line.split('=');
                    templateContent += `${key}=\n`;
                }
            }
        } else {
            templateContent = `# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
PORT=
NODE_ENV=
HOST=

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_HOST=
DB_PORT=
DB_USERNAME=
DB_PASSWORD=
DB_DATABASE=

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL=
ENABLE_REQUEST_LOGGING=
ENABLE_RESPONSE_LOGGING=

# JWT —Å–µ–∫—Ä–µ—Ç
JWT_SECRET=

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
CORS_ORIGIN=
`;
        }

        fs.writeFileSync(templatePath, templateContent);
        ConsoleUtil.showSuccess('–®–∞–±–ª–æ–Ω .env.template —Å–æ–∑–¥–∞–Ω');
    }

    /**
     * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
     */
    private async copyEnvFile(sourcePath: string): Promise<void> {
        if (!fs.existsSync(sourcePath)) {
            console.error(`‚ùå –§–∞–π–ª-–∏—Å—Ç–æ—á–Ω–∏–∫ ${sourcePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        if (fs.existsSync(this.envPath)) {
            const overwrite = await this.askQuestion('–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ');
            if (overwrite.toLowerCase() !== 'y') {
                console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                return;
            }
        }

        fs.copyFileSync(sourcePath, this.envPath);
        ConsoleUtil.showSuccess(`–§–∞–π–ª .env —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ ${sourcePath}`);
    }

    /**
     * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    private async interactiveEdit(): Promise<void> {
        if (!fs.existsSync(this.envPath)) {
            ConsoleUtil.showInfo('–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...');
            await this.createEnvFile();
        }

        ConsoleUtil.showSectionHeader('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞');
        ConsoleUtil.showInfo('–í–≤–µ–¥–∏—Ç–µ "exit" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è');

        while (true) {
            const action = await this.askQuestion('–î–µ–π—Å—Ç–≤–∏–µ (get/set/delete/list/exit): ');

            switch (action.toLowerCase()) {
                case 'get':
                    const getKey = await this.askQuestion('–ö–ª—é—á: ');
                    this.getVariable(getKey);
                    break;

                case 'set':
                    const setKey = await this.askQuestion('–ö–ª—é—á: ');
                    const setValue = await this.askQuestion('–ó–Ω–∞—á–µ–Ω–∏–µ: ');
                    await this.setVariable(setKey, setValue);
                    break;

                case 'delete':
                case 'del':
                    const delKey = await this.askQuestion('–ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ');
                    await this.deleteVariable(delKey);
                    break;

                case 'list':
                case 'ls':
                    this.listVariables();
                    break;

                case 'exit':
                    ConsoleUtil.showInfo('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã');
                    return;

                default:
                    ConsoleUtil.showError('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
            }

            console.log(); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π
     */
    private isSensitiveVariable(key: string): boolean {
        const sensitiveKeys = [
            'PASSWORD', 'PASS', 'PWD', 'SECRET', 'TOKEN', 'KEY', 'PRIVATE',
            'API_KEY', 'AUTH_KEY', 'JWT_SECRET', 'DB_PASSWORD', 'DATABASE_PASSWORD',
            'SMTP_PASSWORD', 'EMAIL_PASSWORD', 'REDIS_PASSWORD', 'SESSION_SECRET',
            'ENCRYPTION_KEY', 'PRIVATE_KEY', 'CLIENT_SECRET', 'ACCESS_TOKEN',
            'REFRESH_TOKEN', 'WEBHOOK_SECRET', 'SIGNING_KEY'
        ];
        
        const upperKey = key.toUpperCase();
        return sensitiveKeys.some(sensitive => upperKey.includes(sensitive));
    }

    /**
     * –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω unsafe —Ä–µ–∂–∏–º
     */
    private maskSensitiveValue(key: string, value: string): string {
        if (this.unsafeMode || !this.isSensitiveVariable(key)) {
            return value;
        }
        
        if (!value || value.length === 0) {
            return value;
        }
        
        // –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–≤–µ–∑–¥–æ—á–∫–∏
        if (value.length <= 3) {
            return '***';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª, –º–µ–∂–¥—É –Ω–∏–º–∏ –≤—Å–µ–≥–¥–∞ 3 –∑–≤–µ–∑–¥–æ—á–∫–∏
        const firstChar = value.charAt(0);
        const lastChar = value.charAt(value.length - 1);
        
        return `${firstChar}***${lastChar}`;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private askQuestion(question: string): Promise<string> {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        return new Promise((resolve) => {
            rl.question(question, (answer) => {
                rl.close();
                resolve(answer.trim());
            });
        });
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    private showHelp(): void {
        console.log(`
üîß –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env)

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run env <command> [options]

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  create                    –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–æ–º
  get <KEY>                 –ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  set <KEY> <VALUE>         –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
  delete <KEY>              –£–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
  list                      –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏:
  backup                    –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é .env
  restore <filename>        –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
  copy <source>             –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å .env –∏–∑ –¥—Ä—É–≥–æ–≥–æ —Ñ–∞–π–ª–∞
  template                  –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env.template

–£—Ç–∏–ª–∏—Ç—ã:
  validate                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å .env —Ñ–∞–π–ª–∞
  edit                      –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  help                      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–§–ª–∞–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
  unsafe, -u, --unsafe     –ü–æ–∫–∞–∑–∞—Ç—å —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã)
                           ‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ!

–ü—Ä–∏–º–µ—Ä—ã:
  npm run env create
  npm run env set PORT 3000
  npm run env get NODE_ENV
  npm run env delete OLD_VAR
  npm run env list
  npm run env list unsafe             # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∞—è –ø–∞—Ä–æ–ª–∏
  npm run env show unsafe             # –¢–æ –∂–µ —á—Ç–æ –∏ list unsafe
  npm run env get JWT_SECRET unsafe   # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫—Ä—ã—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  npm run cli env list -- --unsafe   # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —á–µ—Ä–µ–∑ cli runner
  npm run env backup
  npm run env validate

–ê–ª–∏–∞—Å—ã:
  del = delete
  ls = list
  show = list

üîí –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã, —Å–µ–∫—Ä–µ—Ç—ã) —Å–∫—Ä—ã—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã –∑–Ω–∞—á–∫–æ–º üîí –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
        `);
    }
}

// –ó–∞–ø—É—Å–∫ CLI
const cli = new EnvCLI();
cli.run().catch(console.error); 