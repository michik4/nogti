#!/usr/bin/env node

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
import dotenv from 'dotenv';
dotenv.config();

import 'reflect-metadata';
import { AppDataSource } from '../conf/orm.conf';
import { MigrationUtils } from '../utils/db/migration.util';
import { getDbConfig, getOrmConfig } from '../conf/global.conf';
import SeedRunner from '../seeds/index';
import { ConsoleUtil } from '../utils/console.util';

// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbConfig = getDbConfig();
const ormConfig = getOrmConfig();


/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class DatabaseCLI {
  private migrationUtils: MigrationUtils;

  constructor() {
    this.migrationUtils = new MigrationUtils(AppDataSource);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
   */
  async initialize(): Promise<void> {
    try {
      await AppDataSource.initialize();
      ConsoleUtil.showSuccess('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      process.exit(1);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
   */
  async close(): Promise<void> {
    try {
      if (AppDataSource.isInitialized) {
        await AppDataSource.destroy();
        ConsoleUtil.showInfo('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
   */
  async run(): Promise<void> {
    const command = process.argv[2];
    const argument = process.argv[3];

    try {
      await this.initialize();

      switch (command) {
        case 'migration:generate':
          if (!argument) {
            console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run db migration:generate <name>');
            process.exit(1);
          }
          await this.migrationUtils.generateMigration(argument);
          break;

        case 'migration:create':
          if (!argument) {
            console.error('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: npm run db migration:create <name>');
            process.exit(1);
          }
          await this.migrationUtils.createEmptyMigration(argument);
          break;

        case 'migration:run':
          await this.migrationUtils.runMigrations();
          break;

        case 'migration:revert':
          await this.migrationUtils.revertMigration();
          break;

        case 'migration:status':
          await this.migrationUtils.showMigrationStatus();
          break;

        case 'seed:run':
          if (argument) {
            ConsoleUtil.showProcess(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–¥–∞: ${argument}`);
            await SeedRunner.runSeed(argument + '.ts');
          } else {
            await SeedRunner.runAll(AppDataSource);
          }
          break;

        case 'seed:status':
          await SeedRunner.showStatus(AppDataSource);
          break;

        case 'seed:reset':
          await SeedRunner.resetSeeds(AppDataSource);
          break;

        case 'db:drop':
          await this.dropDatabase();
          break;

        case 'db:create':
          await this.createDatabase();
          break;

        case 'db:reset':
          await this.resetDatabase();
          break;

        case 'help':
        default:
          this.showHelp();
          break;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
      process.exit(1);
    } finally {
      await this.close();
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async dropDatabase(): Promise<void> {
    ConsoleUtil.showProcess('–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...');
    await AppDataSource.dropDatabase();
    ConsoleUtil.showSuccess('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  private async createDatabase(): Promise<void> {
    ConsoleUtil.showProcess('–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await AppDataSource.synchronize();
    ConsoleUtil.showSuccess('–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞');
  }

  /**
   * –°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—É–¥–∞–ª–µ–Ω–∏–µ + —Å–æ–∑–¥–∞–Ω–∏–µ + –º–∏–≥—Ä–∞—Ü–∏–∏ + —Å–∏–¥—ã)
   */
  private async resetDatabase(): Promise<void> {
    ConsoleUtil.showProcess('–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
    await this.dropDatabase();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    await this.migrationUtils.runMigrations();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–¥—ã
    await SeedRunner.runAll(AppDataSource);
    
    ConsoleUtil.showSuccess('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
  }

  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
   */
  private showHelp(): void {
    console.log(`
üóÑÔ∏è  –£—Ç–∏–ª–∏—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run db <command> [options]

–ö–æ–º–∞–Ω–¥—ã –º–∏–≥—Ä–∞—Ü–∏–π:
  migration:generate <name>  –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å—É—â–Ω–æ—Å—Ç—è—Ö
  migration:create <name>    –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç—É—é –º–∏–≥—Ä–∞—Ü–∏—é
  migration:run             –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  migration:revert          –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é
  migration:status          –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π

–ö–æ–º–∞–Ω–¥—ã —Å–∏–¥–æ–≤:
  seed:run                  –í—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ —Å–∏–¥—ã
  seed:run [name]           –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–∏–¥
  seed:status               –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏–¥–æ–≤
  seed:reset                –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Å–∏–¥—ã

–ö–æ–º–∞–Ω–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
  db:drop                   –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
  db:create                 –°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  db:reset                  –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å (drop + migrations + seeds)

–û–±—â–∏–µ:
  help                      –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
  npm run db migration:generate create-users-table
  npm run db migration:run
  npm run db seed:run
  npm run db db:reset
    `);
  }
}

// –ó–∞–ø—É—Å–∫ CLI
const cli = new DatabaseCLI();
cli.run(); 