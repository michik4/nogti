import { AppDataSource } from '../conf/orm.conf';
import { NailMasterEntity, MasterRatingEntity } from '../entities';
import { recalculateMasterRating, getMasterRatingStats } from '../utils/rating.util';
import { TableUtil } from '../utils/table.util';
import { UserEntity, ClientEntity } from '../entities';

export class RatingCli {
    /**
     * –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤
     */
    static async recalculateAllRatings(): Promise<void> {
        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤...\n');

            const masterRepository = AppDataSource.getRepository(NailMasterEntity);
            const masters = await masterRepository.find();

            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –º–∞—Å—Ç–µ—Ä–æ–≤: ${masters.length}\n`);

            const results = [];
            for (const master of masters) {
                try {
                    const statsBefore = await getMasterRatingStats(master.id);
                    await recalculateMasterRating(master.id);
                    
                    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
                    const updatedMaster = await masterRepository.findOne({ where: { id: master.id } });
                    
                    results.push({
                        'ID –º–∞—Å—Ç–µ—Ä–∞': master.id.substring(0, 8) + '...',
                        '–ò–º—è': master.fullName,
                        '–†–µ–π—Ç–∏–Ω–≥': updatedMaster?.rating || 0,
                        '–û—Ç–∑—ã–≤–æ–≤': updatedMaster?.reviewsCount || 0,
                        '–°—Ç–∞—Ç—É—Å': '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω'
                    });
                } catch (error) {
                    results.push({
                        'ID –º–∞—Å—Ç–µ—Ä–∞': master.id.substring(0, 8) + '...',
                        '–ò–º—è': master.fullName,
                        '–†–µ–π—Ç–∏–Ω–≥': '–û—à–∏–±–∫–∞',
                        '–û—Ç–∑—ã–≤–æ–≤': '–û—à–∏–±–∫–∞',
                        '–°—Ç–∞—Ç—É—Å': '‚ùå –û—à–∏–±–∫–∞: ' + (error as Error).message
                    });
                }
            }

            console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:');
            TableUtil.printTable(results);

            console.log('\n‚úÖ –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á–µ—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞
     */
    static async showMasterRatingStats(masterId: string): Promise<void> {
        try {
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ ${masterId}\n`);

            const masterRepository = AppDataSource.getRepository(NailMasterEntity);
            const ratingRepository = AppDataSource.getRepository(MasterRatingEntity);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä–µ
            const master = await masterRepository.findOne({ where: { id: masterId } });
            if (!master) {
                console.log('‚ùå –ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await getMasterRatingStats(masterId);

            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
            const reviews = await ratingRepository.find({
                where: { nailMaster: { id: masterId } },
                relations: ['client'],
                order: { createdAt: 'DESC' }
            });

            console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ:');
            TableUtil.printTable([{
                '–ò–º—è': master.fullName,
                '–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥': master.rating,
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤': master.reviewsCount,
                '–ê–∫—Ç–∏–≤–µ–Ω': master.isActive ? '‚úÖ' : '‚ùå'
            }]);

            console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:');
            TableUtil.printTable([{
                '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥': stats.averageRating,
                '–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤': stats.reviewsCount,
                '‚≠ê 1 –∑–≤–µ–∑–¥–∞': stats.ratingDistribution[0],
                '‚≠ê 2 –∑–≤–µ–∑–¥—ã': stats.ratingDistribution[1],
                '‚≠ê 3 –∑–≤–µ–∑–¥—ã': stats.ratingDistribution[2],
                '‚≠ê 4 –∑–≤–µ–∑–¥—ã': stats.ratingDistribution[3],
                '‚≠ê 5 –∑–≤–µ–∑–¥': stats.ratingDistribution[4]
            }]);

            if (reviews.length > 0) {
                console.log('\nüí¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:');
                const reviewsData = reviews.slice(0, 5).map(review => ({
                    '–î–∞—Ç–∞': review.createdAt.toLocaleDateString('ru-RU'),
                    '–ö–ª–∏–µ–Ω—Ç': review.client.fullName,
                    '–û—Ü–µ–Ω–∫–∞': '‚≠ê'.repeat(review.ratingNumber),
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': review.description?.substring(0, 50) + (review.description?.length > 50 ? '...' : '')
                }));
                TableUtil.printTable(reviewsData);
            } else {
                console.log('\nüí¨ –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∞–º
     */
    static async showOverallStats(): Promise<void> {
        try {
            console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã\n');

            const masterRepository = AppDataSource.getRepository(NailMasterEntity);
            const ratingRepository = AppDataSource.getRepository(MasterRatingEntity);

            // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤
            const totalMasters = await masterRepository.count();
            const totalReviews = await ratingRepository.count();

            // –ú–∞—Å—Ç–µ—Ä–∞ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
            const mastersWithRatings = await masterRepository
                .createQueryBuilder('master')
                .where('master.reviewsCount > 0')
                .getCount();

            // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Å–∏—Å—Ç–µ–º–µ
            const avgRatingResult = await masterRepository
                .createQueryBuilder('master')
                .select('AVG(master.rating)', 'avgRating')
                .where('master.reviewsCount > 0')
                .getRawOne();

            // –¢–æ–ø-5 –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
            const topMasters = await masterRepository
                .createQueryBuilder('master')
                .where('master.reviewsCount >= 3') // –ú–∏–Ω–∏–º—É–º 3 –æ—Ç–∑—ã–≤–∞ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
                .orderBy('master.rating', 'DESC')
                .addOrderBy('master.reviewsCount', 'DESC')
                .limit(5)
                .getMany();

            console.log('üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
            TableUtil.printTable([{
                '–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä–æ–≤': totalMasters,
                '–ú–∞—Å—Ç–µ—Ä–æ–≤ —Å –æ—Ç–∑—ã–≤–∞–º–∏': mastersWithRatings,
                '–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤': totalReviews,
                '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥': parseFloat(avgRatingResult?.avgRating || '0').toFixed(1)
            }]);

            if (topMasters.length > 0) {
                console.log('\nüèÜ –¢–æ–ø-5 –º–∞—Å—Ç–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:');
                const topData = topMasters.map((master, index) => ({
                    '–ú–µ—Å—Ç–æ': index + 1,
                    '–ò–º—è': master.fullName,
                    '–†–µ–π—Ç–∏–Ω–≥': master.rating,
                    '–û—Ç–∑—ã–≤–æ–≤': master.reviewsCount,
                    '–°—Ç–∞—Ç—É—Å': master.isActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'
                }));
                TableUtil.printTable(topData);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞
     */
    static async showReviewDetails(reviewId: string): Promise<void> {
        try {
            console.log(`üìù –î–µ—Ç–∞–ª–∏ –æ—Ç–∑—ã–≤–∞ ${reviewId}\n`);

            const ratingRepository = AppDataSource.getRepository(MasterRatingEntity);

            // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const review = await ratingRepository.findOne({
                where: { id: reviewId },
                relations: ['client', 'nailMaster']
            });

            if (!review) {
                console.log('‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log('üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–∑—ã–≤–µ:');
            TableUtil.printTable([{
                'ID –æ—Ç–∑—ã–≤–∞': review.id,
                '–û—Ü–µ–Ω–∫–∞': '‚≠ê'.repeat(review.ratingNumber) + ` (${review.ratingNumber}/5)`,
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': review.createdAt.toLocaleDateString('ru-RU'),
                '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': review.description?.substring(0, 100) + (review.description?.length > 100 ? '...' : '')
            }]);

            console.log('\nüë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:');
            TableUtil.printTable([{
                'ID –∫–ª–∏–µ–Ω—Ç–∞': review.client.id,
                '–¢–∏–ø ID –∫–ª–∏–µ–Ω—Ç–∞': typeof review.client.id,
                '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞': review.client.fullName,
                'Email': review.client.email || '–ù–µ —É–∫–∞–∑–∞–Ω'
            }]);

            console.log('\nüíÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä–µ:');
            TableUtil.printTable([{
                'ID –º–∞—Å—Ç–µ—Ä–∞': review.nailMaster.id,
                '–ò–º—è –º–∞—Å—Ç–µ—Ä–∞': review.nailMaster.fullName,
                '–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥': review.nailMaster.rating,
                '–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤': review.nailMaster.reviewsCount
            }]);

            if (review.description && review.description.length > 100) {
                console.log('\nüí¨ –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:');
                console.log(`"${review.description}"`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–∑—ã–≤–∞:', error);
            throw error;
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º –æ—Ç–∑—ã–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async diagnos–µOwnership(userId: string, reviewId?: string): Promise<void> {
        try {
            console.log(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}\n`);

            const userRepository = AppDataSource.getRepository(UserEntity);
            const clientRepository = AppDataSource.getRepository(ClientEntity);
            const ratingRepository = AppDataSource.getRepository(MasterRatingEntity);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await userRepository.findOne({ where: { id: userId } });
            if (!user) {
                console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            console.log('üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:');
            TableUtil.printTable([{
                'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.id,
                '–¢–∏–ø ID': typeof user.id,
                'Email': user.email,
                '–†–æ–ª—å': user.role
            }]);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            const client = await clientRepository.findOne({ where: { id: userId } });
            
            console.log('\nüë• –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:');
            if (client) {
                TableUtil.printTable([{
                    'ID –∫–ª–∏–µ–Ω—Ç–∞': client.id,
                    '–¢–∏–ø ID': typeof client.id,
                    '–ò–º—è': client.fullName,
                    '–°—Ç–∞—Ç—É—Å': '‚úÖ –ù–∞–π–¥–µ–Ω'
                }]);
            } else {
                console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç–æ–º');
            }

            // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userReviews = await ratingRepository.find({
                where: { client: { id: userId } },
                relations: ['client', 'nailMaster']
            });

            console.log(`\nüìù –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–π–¥–µ–Ω–æ: ${userReviews.length}):`);
            if (userReviews.length > 0) {
                const reviewsData = userReviews.map(review => ({
                    'ID –æ—Ç–∑—ã–≤–∞': review.id.substring(0, 8) + '...',
                    '–ú–∞—Å—Ç–µ—Ä': review.nailMaster.fullName,
                    '–û—Ü–µ–Ω–∫–∞': review.ratingNumber,
                    '–î–∞—Ç–∞': review.createdAt.toLocaleDateString('ru-RU')
                }));
                TableUtil.printTable(reviewsData);
            } else {
                console.log('–û—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }

            // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–∑—ã–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ
            if (reviewId) {
                console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–∞ ${reviewId}:`);
                
                const targetReview = await ratingRepository.findOne({
                    where: { id: reviewId },
                    relations: ['client', 'nailMaster']
                });

                if (!targetReview) {
                    console.log('‚ùå –û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }

                console.log('üÜî –°—Ä–∞–≤–Ω–µ–Ω–∏–µ ID:');
                TableUtil.printTable([{
                    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID': userId,
                    '–ê–≤—Ç–æ—Ä –æ—Ç–∑—ã–≤–∞ ID': targetReview.client.id,
                    '–¢–∏–ø—ã': `${typeof userId} vs ${typeof targetReview.client.id}`,
                    '–°—Ç—Ä–æ–≥–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ': userId === targetReview.client.id ? '‚úÖ' : '‚ùå',
                    '–ù–µ—Å—Ç—Ä–æ–≥–æ–µ —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ': userId == targetReview.client.id ? '‚úÖ' : '‚ùå'
                }]);

                const isOwner = userId === targetReview.client.id;
                console.log(`\n${isOwner ? '‚úÖ' : '‚ùå'} –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${isOwner ? '–Ø–í–õ–Ø–ï–¢–°–Ø' : '–ù–ï –Ø–í–õ–Ø–ï–¢–°–Ø'} –∞–≤—Ç–æ—Ä–æ–º –æ—Ç–∑—ã–≤–∞`);
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞:', error);
            throw error;
        }
    }
} 