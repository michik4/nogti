import { FormatUtil } from './format.util';
import { getConfig } from '../conf/global.conf';

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
 */
export class ConsoleUtil {
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–¥–æ–≤
     */
    static showSeedsStatistics(executed: number, total: number): void {

        const config = getConfig();

        if (config.SERVER.NODE_ENV === 'development') {
            const percentage = FormatUtil.formatPercentage(executed, total);
            console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${executed}/${total} —Å–∏–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (${percentage})`);

            if (executed === total && total > 0) {
                console.log('üéâ –í—Å–µ —Å–∏–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!');
            } else if (executed === 0) {
                console.log('‚ö†Ô∏è  –ù–∏ –æ–¥–∏–Ω —Å–∏–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω');
            }
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    static showStatistics(executed: number, total: number, itemName: string = '—ç–ª–µ–º–µ–Ω—Ç–æ–≤'): void {
        const config = getConfig();

        if (config.SERVER.NODE_ENV === 'development') {
            const stats = FormatUtil.formatExecutionStats(executed, total);
            console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats} ${itemName} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    static showSuccess(message: string): void {
        const config = getConfig();

        if (config.SERVER.NODE_ENV === 'development') {
            console.log(`‚úÖ ${message}`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    static showError(message: string, error?: any): void {
        const config = getConfig();

        if (config.SERVER.NODE_ENV === 'development') {
            console.error(`‚ùå ${message}`);
            if (error) {
                console.error(error);
            }
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    static showInfo(message: string, showIcon: boolean = true): void {
        const config = getConfig();
        const icon = showIcon ? 'üìë' : '';

        if (config.SERVER.NODE_ENV === 'development') {
            console.log(`${icon} ${message}`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
     */
    static showWarning(message: string, showIcon: boolean = true): void {
        const config = getConfig();
        const icon = showIcon ? '‚ö†Ô∏è' : '';

        if (config.SERVER.NODE_ENV === 'development') {
            console.log(`${icon} ${message}`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
     */
    static showProcess(message: string, showIcon: boolean = true): void {
        const config = getConfig();
        const icon = showIcon ? 'üîÑ' : '';

        if (config.SERVER.NODE_ENV === 'development') {
            console.log(`${icon} ${message}`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
     */
    static showSectionHeader(title: string, showIcon: boolean = true): void {
        const config = getConfig();
        const icon = showIcon ? 'üìä' : '';

        if (config.SERVER.NODE_ENV === 'development') {
            console.log(`\n${icon} ${title}:\n`);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
     */
    static showSeparator(): void {
        const config = getConfig();

        if (config.SERVER.NODE_ENV === 'development') {
            console.log('‚îÄ'.repeat(50));
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ
     */
    static showKeyValue(key: string, value: string): void {
        const config = getConfig();

        if (config.SERVER.NODE_ENV === 'development') {
            console.log(`${key}: ${value}`);
        }
    }
} 