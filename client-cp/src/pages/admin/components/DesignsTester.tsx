import React, { useState } from 'react';
import { designsService, searchService, type DesignSearchParams, type CreateDesignRequest } from '../../../services';
import { useApiCall } from '../../../hooks/useApiCall';
import { ApiResult } from '../../../components/ApiResult';
import { UuidSearch } from '../../../components/UuidSearch';

export const DesignsTester: React.FC = () => {
  const [searchParams, setSearchParams] = useState<DesignSearchParams>({
    page: 1,
    limit: 10,
    type: 'basic'
  });

  const [designId, setDesignId] = useState('');
  const [createData, setCreateData] = useState<CreateDesignRequest>({
    title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞',
    imageUrl: 'https://example.com/image1.jpg',
    videoUrl: '',
    type: 'basic',
    tags: ['—Ç–µ—Å—Ç', '–¥–∏–∑–∞–π–Ω'],
    color: '—Ä–æ–∑–æ–≤—ã–π',
    estimatedPrice: 1500
  });

  const [adminParams, setAdminParams] = useState({
    page: 1,
    limit: 10,
    isModerated: undefined as boolean | undefined,
    isActive: undefined as boolean | undefined
  });

  const apiCall = useApiCall();

  const handleGetDesigns = async () => {
    await apiCall.execute(
      () => designsService.getDesigns(searchParams),
      '–î–∏–∑–∞–π–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã'
    );
  };

  const handleGetDesignById = async () => {
    if (!designId.trim()) {
      await apiCall.execute(
        () => Promise.reject(new Error('–í–≤–µ–¥–∏—Ç–µ ID –¥–∏–∑–∞–π–Ω–∞')),
        ''
      );
      return;
    }

    await apiCall.execute(
      () => designsService.getDesignById(designId),
      '–î–∏–∑–∞–π–Ω –Ω–∞–π–¥–µ–Ω'
    );
  };

  const handleCreateDesign = async () => {
    await apiCall.execute(
      () => designsService.createDesign(createData),
      '–î–∏–∑–∞–π–Ω —Å–æ–∑–¥–∞–Ω'
    );
  };

  const handleToggleLike = async () => {
    if (!designId.trim()) {
      await apiCall.execute(
        () => Promise.reject(new Error('–í–≤–µ–¥–∏—Ç–µ ID –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ª–∞–π–∫–∞')),
        ''
      );
      return;
    }

    await apiCall.execute(
      () => designsService.toggleLike(designId),
      '–õ–∞–π–∫ –æ–±–Ω–æ–≤–ª–µ–Ω'
    );
  };

  const handleGetMastersForDesign = async () => {
    if (!designId.trim()) {
      await apiCall.execute(
        () => Promise.reject(new Error('–í–≤–µ–¥–∏—Ç–µ ID –¥–∏–∑–∞–π–Ω–∞')),
        ''
      );
      return;
    }

    await apiCall.execute(
      () => designsService.getMastersForDesign(designId),
      '–ú–∞—Å—Ç–µ—Ä–∞ –¥–ª—è –¥–∏–∑–∞–π–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã'
    );
  };

  const handleGetPopularDesigns = async () => {
    await apiCall.execute(
      () => designsService.getPopularDesigns(5),
      '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã'
    );
  };

  const handleGetAllDesignsForAdmin = async () => {
    await apiCall.execute(
      () => designsService.getAllDesignsForAdmin(adminParams),
      '–í—Å–µ –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã'
    );
  };

  const handleModerateDesign = async (isModerated: boolean) => {
    if (!designId.trim()) {
      await apiCall.execute(
        () => Promise.reject(new Error('–í–≤–µ–¥–∏—Ç–µ ID –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏')),
        ''
      );
      return;
    }

    await apiCall.execute(
      () => designsService.moderateDesign(designId, isModerated, true),
      isModerated ? '–î–∏–∑–∞–π–Ω –æ–¥–æ–±—Ä–µ–Ω' : '–î–∏–∑–∞–π–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω'
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–∏–∑–∞–π–Ω–æ–≤
  const handleSearchDesigns = async (query: string) => {
    try {
      return await searchService.searchDesigns({ query });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–∏–∑–∞–π–Ω–æ–≤:', error);
      return [];
    }
  };

  return (
    <div className="tester-section">
      <h2>üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–æ–≤</h2>

      {/* –ü–æ–∏—Å–∫ –¥–∏–∑–∞–π–Ω–æ–≤ */}
      <div className="form-section">
        <h3>–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∑–∞–π–Ω–æ–≤</h3>
        <div className="form-group">
          <label>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</label>
          <input
            type="number"
            value={searchParams.page || 1}
            onChange={(e) => setSearchParams({ ...searchParams, page: parseInt(e.target.value) || 1 })}
          />
        </div>
        <div className="form-group">
          <label>–õ–∏–º–∏—Ç:</label>
          <input
            type="number"
            value={searchParams.limit || 10}
            onChange={(e) => setSearchParams({ ...searchParams, limit: parseInt(e.target.value) || 10 })}
          />
        </div>
        <div className="form-group">
          <label>–¢–∏–ø:</label>
          <select
            value={searchParams.type || 'basic'}
            onChange={(e) => setSearchParams({ ...searchParams, type: e.target.value as 'basic' | 'designer' })}
          >
            <option value="">–í—Å–µ</option>
            <option value="basic">–ë–∞–∑–æ–≤—ã–µ</option>
            <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–µ</option>
          </select>
        </div>
        <div className="form-group">
          <label>–ò—Å—Ç–æ—á–Ω–∏–∫:</label>
          <select
            value={searchParams.source || ''}
            onChange={(e) => setSearchParams({ ...searchParams, source: e.target.value as 'admin' | 'client' | 'master' })}
          >
            <option value="">–í—Å–µ</option>
            <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
            <option value="client">–ö–ª–∏–µ–Ω—Ç</option>
            <option value="master">–ú–∞—Å—Ç–µ—Ä</option>
          </select>
        </div>
        <div className="form-group">
          <label>–¶–≤–µ—Ç:</label>
          <input
            type="text"
            value={searchParams.color || ''}
            onChange={(e) => setSearchParams({ ...searchParams, color: e.target.value })}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–∑–æ–≤—ã–π"
          />
        </div>
        <div className="form-group">
          <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
          <input
            type="text"
            value={searchParams.tags || ''}
            onChange={(e) => setSearchParams({ ...searchParams, tags: e.target.value })}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ—Ä–µ–Ω—á,–±–ª–µ—Å—Ç–∫–∏"
          />
        </div>
        <button onClick={handleGetDesigns} disabled={apiCall.loading}>
          {apiCall.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü–æ–ª—É—á–∏—Ç—å –¥–∏–∑–∞–π–Ω—ã'}
        </button>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º */}
      <div className="form-section">
        <h3>–î–µ–π—Å—Ç–≤–∏—è —Å –¥–∏–∑–∞–π–Ω–æ–º</h3>
        
        <UuidSearch
          label="–ü–æ–∏—Å–∫ –¥–∏–∑–∞–π–Ω–∞"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞"
          value={designId}
          onChange={setDesignId}
          onSearch={handleSearchDesigns}
        />
        
        <div className="actions-row">
          <button onClick={handleGetDesignById} disabled={apiCall.loading}>
            –ü–æ–ª—É—á–∏—Ç—å –ø–æ ID
          </button>
          <button onClick={handleToggleLike} disabled={apiCall.loading}>
            –õ–∞–π–∫/–ê–Ω–ª–∞–π–∫
          </button>
          <button onClick={handleGetMastersForDesign} disabled={apiCall.loading}>
            –ü–æ–ª—É—á–∏—Ç—å –º–∞—Å—Ç–µ—Ä–æ–≤
          </button>
        </div>
      </div>

      {/* –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ */}
      <div className="form-section">
        <h3>–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞</h3>
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞–Ω–∏–µ:</label>
          <input
            type="text"
            value={createData.title}
            onChange={(e) => setCreateData({ ...createData, title: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
          <textarea
            value={createData.description}
            onChange={(e) => setCreateData({ ...createData, description: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</label>
          <input
            type="url"
            value={createData.imageUrl}
            onChange={(e) => setCreateData({ ...createData, imageUrl: e.target.value })}
            placeholder="https://example.com/image.jpg"
          />
        </div>
        <div className="form-group">
          <label>URL –≤–∏–¥–µ–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):</label>
          <input
            type="url"
            value={createData.videoUrl || ''}
            onChange={(e) => setCreateData({ ...createData, videoUrl: e.target.value })}
            placeholder="https://example.com/video.mp4"
          />
        </div>
        <div className="form-group">
          <label>–¢–∏–ø:</label>
          <select
            value={createData.type || 'basic'}
            onChange={(e) => setCreateData({ ...createData, type: e.target.value as 'basic' | 'designer' })}
          >
            <option value="basic">–ë–∞–∑–æ–≤—ã–π</option>
            <option value="designer">–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π</option>
          </select>
        </div>
        <div className="form-group">
          <label>–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
          <input
            type="text"
            value={createData.tags?.join(',') || ''}
            onChange={(e) => setCreateData({ ...createData, tags: e.target.value.split(',').map(tag => tag.trim()) })}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ñ—Ä–µ–Ω—á,–±–ª–µ—Å—Ç–∫–∏"
          />
        </div>
        <div className="form-group">
          <label>–¶–≤–µ—Ç:</label>
          <input
            type="text"
            value={createData.color || ''}
            onChange={(e) => setCreateData({ ...createData, color: e.target.value })}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–∑–æ–≤—ã–π"
          />
        </div>
        <div className="form-group">
          <label>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (—Ä—É–±):</label>
          <input
            type="number"
            value={createData.estimatedPrice || 0}
            onChange={(e) => setCreateData({ ...createData, estimatedPrice: parseInt(e.target.value) || 0 })}
          />
        </div>
        <button onClick={handleCreateDesign} disabled={apiCall.loading}>
          {apiCall.loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω'}
        </button>
      </div>

      {/* –ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ */}
      <div className="form-section">
        <h3>–ê–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏</h3>
        <div className="form-group">
          <label>–°—Ç—Ä–∞–Ω–∏—Ü–∞:</label>
          <input
            type="number"
            value={adminParams.page}
            onChange={(e) => setAdminParams({ ...adminParams, page: parseInt(e.target.value) || 1 })}
          />
        </div>
        <div className="form-group">
          <label>–õ–∏–º–∏—Ç:</label>
          <input
            type="number"
            value={adminParams.limit}
            onChange={(e) => setAdminParams({ ...adminParams, limit: parseInt(e.target.value) || 10 })}
          />
        </div>
        <div className="form-group">
          <label>–ú–æ–¥–µ—Ä–∞—Ü–∏—è:</label>
          <select
            value={adminParams.isModerated === undefined ? '' : adminParams.isModerated.toString()}
            onChange={(e) => {
              const value = e.target.value;
              setAdminParams({ 
                ...adminParams, 
                isModerated: value === '' ? undefined : value === 'true' 
              });
            }}
          >
            <option value="">–í—Å–µ</option>
            <option value="true">–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
            <option value="false">–ù–µ–º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
          </select>
        </div>
        <div className="form-group">
          <label>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</label>
          <select
            value={adminParams.isActive === undefined ? '' : adminParams.isActive.toString()}
            onChange={(e) => {
              const value = e.target.value;
              setAdminParams({ 
                ...adminParams, 
                isActive: value === '' ? undefined : value === 'true' 
              });
            }}
          >
            <option value="">–í—Å–µ</option>
            <option value="true">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
            <option value="false">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
          </select>
        </div>
        <div className="actions-row">
          <button onClick={handleGetAllDesignsForAdmin} disabled={apiCall.loading}>
            –í—Å–µ –¥–∏–∑–∞–π–Ω—ã
          </button>
          <button onClick={handleGetPopularDesigns} disabled={apiCall.loading}>
            –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ
          </button>
        </div>
        <div className="actions-row">
          <button onClick={() => handleModerateDesign(true)} disabled={apiCall.loading || !designId}>
            –û–¥–æ–±—Ä–∏—Ç—å –¥–∏–∑–∞–π–Ω
          </button>
          <button onClick={() => handleModerateDesign(false)} disabled={apiCall.loading || !designId}>
            –û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–∏–∑–∞–π–Ω
          </button>
        </div>
      </div>

      <ApiResult 
        loading={apiCall.loading} 
        error={apiCall.error} 
        success={apiCall.success} 
        data={apiCall.data}
        onClear={apiCall.clearState}
      />
    </div>
  );
}; 