import React, { useState } from 'react';
import { authService, type LoginRequest, type RegisterRequest } from '../../../services';
import { useApiCall } from '../../../hooks/useApiCall';
import { ApiResult } from '../../../components/ApiResult';

export const AuthTester: React.FC = () => {
  const [loginData, setLoginData] = useState<LoginRequest>({
    email: 'test@example.com',
    password: 'password123'
  });

  const [registerData, setRegisterData] = useState<RegisterRequest>({
    email: 'newuser@example.com',
    username: 'newuser',
    password: 'password123',
    role: 'client',
    fullName: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
  });

  const [adminData, setAdminData] = useState({
    email: 'admin@example.com',
    username: 'admin',
    password: 'admin123',
    role: 'admin' as const,
    fullName: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
    phone: '+7 (999) 123-45-67',
    adminSecret: 'nogotochki_admin_secret_2024'
  });

  const apiCall = useApiCall();

  const handleLogin = async () => {
    await apiCall.execute(
      () => authService.login(loginData),
      '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥'
    );
  };

  const handleRegister = async () => {
    await apiCall.execute(
      () => authService.register(registerData),
      '–£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
    );
  };

  const handleLogout = () => {
    authService.logout();
    apiCall.execute(
      () => Promise.resolve({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω' }),
      '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω'
    );
  };

  const handleClearTokens = () => {
    authService.logout(); // –≠—Ç–æ –æ—á–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã
    apiCall.execute(
      () => Promise.resolve({ message: '–¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã' }),
      '–¢–æ–∫–µ–Ω—ã –æ—á–∏—â–µ–Ω—ã'
    );
  };

  const handleRegisterAdmin = async () => {
    await apiCall.execute(
      () => authService.registerAdmin(adminData),
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω'
    );
  };

  const checkAuth = () => {
    const isAuth = authService.isAuthenticated();
    const user = authService.getCurrentUser();
    const token = authService.getToken();
    apiCall.execute(
      () => Promise.resolve({ 
        isAuthenticated: isAuth, 
        user: user,
        hasToken: !!token,
        tokenLength: token ? token.length : 0
      }),
      '–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω'
    );
  };

  const currentUser = authService.getCurrentUser();

  return (
    <div className="tester-section">
      <h2>üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>

      {/* –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */}
      <div className="status-section">
        <h3>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</h3>
        <p>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {authService.isAuthenticated() ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'}</p>
        {currentUser && (
          <div>
            <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {currentUser.email}</p>
            <p>–†–æ–ª—å: {currentUser.role}</p>
          </div>
        )}
        <button onClick={checkAuth}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å</button>
      </div>

      {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
      <div className="form-section">
        <h3>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É</h3>
        <div className="form-group">
          <label>Email:</label>
          <input
            type="email"
            value={loginData.email || ''}
            onChange={(e) => setLoginData({ ...loginData, email: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input
            type="password"
            value={loginData.password}
            onChange={(e) => setLoginData({ ...loginData, password: e.target.value })}
          />
        </div>
        <button onClick={handleLogin} disabled={apiCall.loading}>
          {apiCall.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–í–æ–π—Ç–∏'}
        </button>
      </div>

      {/* –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
      <div className="form-section">
        <h3>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h3>
        <div className="form-group">
          <label>Email:</label>
          <input
            type="email"
            value={registerData.email}
            onChange={(e) => setRegisterData({ ...registerData, email: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
          <input
            type="text"
            value={registerData.username}
            onChange={(e) => setRegisterData({ ...registerData, username: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input
            type="password"
            value={registerData.password}
            onChange={(e) => setRegisterData({ ...registerData, password: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–†–æ–ª—å:</label>
          <select
            value={registerData.role}
            onChange={(e) => setRegisterData({ ...registerData, role: e.target.value as 'client' | 'nailmaster' | 'admin' })}
          >
            <option value="client">–ö–ª–∏–µ–Ω—Ç</option>
            <option value="nailmaster">–ú–∞—Å—Ç–µ—Ä</option>
            <option value="admin">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</option>
          </select>
        </div>
        <div className="form-group">
          <label>–ü–æ–ª–Ω–æ–µ –∏–º—è:</label>
          <input
            type="text"
            value={registerData.fullName || ''}
            onChange={(e) => setRegisterData({ ...registerData, fullName: e.target.value })}
          />
        </div>
        <button onClick={handleRegister} disabled={apiCall.loading}>
          {apiCall.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
        </button>
      </div>

      {/* –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ */}
      <div className="form-section">
        <h3>üîë –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h3>
        <p style={{ color: '#666', fontSize: '0.9rem', marginBottom: '1rem' }}>
          –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        </p>
        <div className="form-group">
          <label>Email:</label>
          <input
            type="email"
            value={adminData.email}
            onChange={(e) => setAdminData({ ...adminData, email: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</label>
          <input
            type="text"
            value={adminData.username}
            onChange={(e) => setAdminData({ ...adminData, username: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input
            type="password"
            value={adminData.password}
            onChange={(e) => setAdminData({ ...adminData, password: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–ü–æ–ª–Ω–æ–µ –∏–º—è:</label>
          <input
            type="text"
            value={adminData.fullName}
            onChange={(e) => setAdminData({ ...adminData, fullName: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
          <input
            type="tel"
            value={adminData.phone}
            onChange={(e) => setAdminData({ ...adminData, phone: e.target.value })}
          />
        </div>
        <div className="form-group">
          <label>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á:</label>
          <input
            type="password"
            value={adminData.adminSecret}
            onChange={(e) => setAdminData({ ...adminData, adminSecret: e.target.value })}
            placeholder="nogotochki_admin_secret_2024"
          />
        </div>
        <button onClick={handleRegisterAdmin} disabled={apiCall.loading} className="success">
          {apiCall.loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'}
        </button>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="actions-section">
        <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
        <div className="actions-row">
          <button onClick={handleLogout}>–í—ã–π—Ç–∏</button>
          <button onClick={handleClearTokens} className="secondary">–û—á–∏—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã</button>
        </div>
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
      <ApiResult 
        loading={apiCall.loading}
        error={apiCall.error}
        success={apiCall.success}
        data={apiCall.data}
        onClear={apiCall.clearState}
      />
    </div>
  );
}; 